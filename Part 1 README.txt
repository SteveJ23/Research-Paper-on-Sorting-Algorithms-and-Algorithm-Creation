

The files necessary to run the code for Part 1 are:
	1. sorting.h (header file for sorting.cpp)
	2. sorting.cpp (source file that contains all sorting algorithms)
	3. data.h (header file for data.cpp)
	4. data.cpp (source file for running experiments utilizing sorting algorithms)
	5. termProject.cpp (driver for running Part 1 code)
	
To run the code, simply make a project in Visual Studio with the aforementioned .cpp and .h files as source files and header
files respectively. Then navigate to the termProject.cpp file in the project and run the code from there. Performance information
will be printed to the terminal in real time as well as a results.txt which will be created to store the results.


There are two ways to go about modifying which sorting algorithms are and aren't run. First, you can simply comment
out one of the for loops in the termProject source file that runs through each of the data inputs to avoid running all
tests with that input (i.e. ascending input). Alternatively, you could comment out specific algorithms altogether 
in the trials function located in the the data source file. That said, if you wanted to omit only specific data inputs for 
specific algorithms, you would need to comment out their respective for loops in the relevant algorithms
trial function (i.e. insertionTrials).

As for the data set, that is built before each algorithms run using the vect function which builds the ascending, descending,
or random input based on the arguments passed to it by each algorithms trials function.

The easiest way to modify how many times each algorithm is tested with a specific input data set is to change the 
numTrials integer variable at the beginning of the main function in the termProject source file. 
Similarly, you can change how many times the size all of the algorithms' input increases by changing the integer numLevels
in the same area of the termProject source file. And if you wanted to change the base by which the input size scales (default
is 5 resulting in input sizes of 5, 25, 125, etc.) simply alter value of the integer base right below numLevels.

The specific data that was exported from the results.txt file generated by the code for part 1 is saved and analyzed in the 
"Exprted Data.xlsx" file.